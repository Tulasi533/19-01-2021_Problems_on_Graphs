### Perfect_Friends

## Source Code

import java.io.*;
import java.util.*;

public class Main {
    static class  Edge {
        int v;
        int nbr;
        Edge(int v, int nbr) {
            this.v = v;
            this.nbr = nbr;
        }
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(br.readLine());
        int k = Integer.parseInt(br.readLine());

        // write your code here
        ArrayList < Edge >[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList < > ();
        }
        for (int i = 0; i < k; i++) {
            String line = br.readLine();
            String[] part = line.split(" ");
            int v1 = Integer.parseInt(part[0]);
            int v2 = Integer.parseInt(part[1]);
            graph[v1].add(new Edge(v1, v2));
            graph[v2].add(new Edge(v2, v1));
        }

        ArrayList < ArrayList < Integer >> comps = new ArrayList < > ();
        boolean visited[] = new boolean[n];
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                ArrayList < Integer > sub_comps = new ArrayList < > ();
                getComps(graph, visited, sub_comps, i);
                comps.add(sub_comps);
            }
        }
        int pairs = 0;
        for(int i=0;i<comps.size();i++){
            for(int j=i+1;j<comps.size();j++){
                pairs += (comps.get(i).size() * comps.get(j).size());
            }
        }
        // System.out.println(comps);
        System.out.println(pairs);

    }
    public static void getComps(ArrayList < Edge >[] graph, boolean[] visited, ArrayList < Integer > sub_comps, int src) {
        sub_comps.add(src);
        visited[src] = true;
        for (Edge e: graph[src]) {
            if (!visited[e.nbr]) {
                getComps(graph, visited, sub_comps, e.nbr);
            }
        }
    }

}
